#include <iostream>
#include <cstring>

template <typename T>
class Wrapper {
private:
    T value;
public:
    Wrapper(T val) : value(val) {}

    T getValue() const {
        return value;
    }
};

template <>
class Wrapper<char*> {
private:
    char* value;
public:
    explicit Wrapper(char* val) : value(val) {}

    int getValue() const {
        return std::strlen(value);
    }
};

int main() {
    Wrapper<int> intWrapper(42);
    std::cout << "Wrapped int value: " << intWrapper.getValue() << std::endl;

    char* str = "Hello, World!";
    Wrapper<char*> charWrapper(str);
    std::cout << "Length of the wrapped string: " << charWrapper.getValue() << std::endl;

    return 0;
}
